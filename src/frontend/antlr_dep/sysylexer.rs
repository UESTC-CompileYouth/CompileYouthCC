// Generated from src/frontend/antlr_dep/SysY.g4 by ANTLR 4.8
#![allow(dead_code)]
#![allow(nonstandard_style)]
#![allow(unused_imports)]
#![allow(unused_variables)]
use antlr_rust::atn::ATN;
use antlr_rust::atn_deserializer::ATNDeserializer;
use antlr_rust::char_stream::CharStream;
use antlr_rust::dfa::DFA;
use antlr_rust::error_listener::ErrorListener;
use antlr_rust::int_stream::IntStream;
use antlr_rust::lexer::{BaseLexer, Lexer, LexerRecog};
use antlr_rust::lexer_atn_simulator::{ILexerATNSimulator, LexerATNSimulator};
use antlr_rust::parser_rule_context::{cast, BaseParserRuleContext, ParserRuleContext};
use antlr_rust::recognizer::{Actions, Recognizer};
use antlr_rust::rule_context::{BaseRuleContext, EmptyContext, EmptyCustomRuleContext};
use antlr_rust::token::*;
use antlr_rust::token_factory::{CommonTokenFactory, TokenAware, TokenFactory};
use antlr_rust::vocabulary::{Vocabulary, VocabularyImpl};
use antlr_rust::PredictionContextCache;
use antlr_rust::TokenSource;

use antlr_rust::{lazy_static, Tid, TidAble, TidExt};

use std::cell::RefCell;
use std::marker::PhantomData;
use std::ops::{Deref, DerefMut};
use std::rc::Rc;
use std::sync::Arc;

pub const T__0: isize = 1;
pub const Int: isize = 2;
pub const Float: isize = 3;
pub const Void: isize = 4;
pub const Const: isize = 5;
pub const Return: isize = 6;
pub const If: isize = 7;
pub const Else: isize = 8;
pub const For: isize = 9;
pub const While: isize = 10;
pub const Do: isize = 11;
pub const Break: isize = 12;
pub const Continue: isize = 13;
pub const Lparen: isize = 14;
pub const Rparen: isize = 15;
pub const Lbrkt: isize = 16;
pub const Rbrkt: isize = 17;
pub const Lbrace: isize = 18;
pub const Rbrace: isize = 19;
pub const Comma: isize = 20;
pub const Semicolon: isize = 21;
pub const Question: isize = 22;
pub const Colon: isize = 23;
pub const Minus: isize = 24;
pub const Exclamation: isize = 25;
pub const Tilde: isize = 26;
pub const Addition: isize = 27;
pub const Multiplication: isize = 28;
pub const Division: isize = 29;
pub const Modulo: isize = 30;
pub const LAND: isize = 31;
pub const LOR: isize = 32;
pub const EQ: isize = 33;
pub const NEQ: isize = 34;
pub const LT: isize = 35;
pub const LE: isize = 36;
pub const GT: isize = 37;
pub const GE: isize = 38;
pub const IntLiteral: isize = 39;
pub const FloatLiteral: isize = 40;
pub const Identifier: isize = 41;
pub const WS: isize = 42;
pub const LINE_COMMENT: isize = 43;
pub const COMMENT: isize = 44;
pub const DigitSequence: isize = 45;
pub const channelNames: [&'static str; 0 + 2] = ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"];

pub const modeNames: [&'static str; 1] = ["DEFAULT_MODE"];

pub const ruleNames: [&'static str; 58] = [
    "T__0",
    "Int",
    "Float",
    "Void",
    "Const",
    "Return",
    "If",
    "Else",
    "For",
    "While",
    "Do",
    "Break",
    "Continue",
    "Lparen",
    "Rparen",
    "Lbrkt",
    "Rbrkt",
    "Lbrace",
    "Rbrace",
    "Comma",
    "Semicolon",
    "Question",
    "Colon",
    "Minus",
    "Exclamation",
    "Tilde",
    "Addition",
    "Multiplication",
    "Division",
    "Modulo",
    "LAND",
    "LOR",
    "EQ",
    "NEQ",
    "LT",
    "LE",
    "GT",
    "GE",
    "IntLiteral",
    "FloatLiteral",
    "Identifier",
    "WS",
    "LINE_COMMENT",
    "COMMENT",
    "Digit",
    "HexadecimalDigit",
    "HexadecimalPrefix",
    "FloatingConstant",
    "DecimalFloatingConstant",
    "HexadecimalFloatingConstant",
    "FractionalConstant",
    "ExponentPart",
    "Sign",
    "DigitSequence",
    "HexadecimalFractionalConstant",
    "BinaryExponentPart",
    "HexadecimalDigitSequence",
    "FloatingSuffix",
];

pub const _LITERAL_NAMES: [Option<&'static str>; 39] = [
    None,
    Some("'='"),
    Some("'int'"),
    Some("'float'"),
    Some("'void'"),
    Some("'const'"),
    Some("'return'"),
    Some("'if'"),
    Some("'else'"),
    Some("'for'"),
    Some("'while'"),
    Some("'do'"),
    Some("'break'"),
    Some("'continue'"),
    Some("'('"),
    Some("')'"),
    Some("'['"),
    Some("']'"),
    Some("'{'"),
    Some("'}'"),
    Some("','"),
    Some("';'"),
    Some("'?'"),
    Some("':'"),
    Some("'-'"),
    Some("'!'"),
    Some("'~'"),
    Some("'+'"),
    Some("'*'"),
    Some("'/'"),
    Some("'%'"),
    Some("'&&'"),
    Some("'||'"),
    Some("'=='"),
    Some("'!='"),
    Some("'<'"),
    Some("'<='"),
    Some("'>'"),
    Some("'>='"),
];
pub const _SYMBOLIC_NAMES: [Option<&'static str>; 46] = [
    None,
    None,
    Some("Int"),
    Some("Float"),
    Some("Void"),
    Some("Const"),
    Some("Return"),
    Some("If"),
    Some("Else"),
    Some("For"),
    Some("While"),
    Some("Do"),
    Some("Break"),
    Some("Continue"),
    Some("Lparen"),
    Some("Rparen"),
    Some("Lbrkt"),
    Some("Rbrkt"),
    Some("Lbrace"),
    Some("Rbrace"),
    Some("Comma"),
    Some("Semicolon"),
    Some("Question"),
    Some("Colon"),
    Some("Minus"),
    Some("Exclamation"),
    Some("Tilde"),
    Some("Addition"),
    Some("Multiplication"),
    Some("Division"),
    Some("Modulo"),
    Some("LAND"),
    Some("LOR"),
    Some("EQ"),
    Some("NEQ"),
    Some("LT"),
    Some("LE"),
    Some("GT"),
    Some("GE"),
    Some("IntLiteral"),
    Some("FloatLiteral"),
    Some("Identifier"),
    Some("WS"),
    Some("LINE_COMMENT"),
    Some("COMMENT"),
    Some("DigitSequence"),
];
lazy_static! {
    static ref _shared_context_cache: Arc<PredictionContextCache> =
        Arc::new(PredictionContextCache::new());
    static ref VOCABULARY: Box<dyn Vocabulary> = Box::new(VocabularyImpl::new(
        _LITERAL_NAMES.iter(),
        _SYMBOLIC_NAMES.iter(),
        None
    ));
}

pub type LexerContext<'input> =
    BaseRuleContext<'input, EmptyCustomRuleContext<'input, LocalTokenFactory<'input>>>;
pub type LocalTokenFactory<'input> = CommonTokenFactory;

type From<'a> = <LocalTokenFactory<'a> as TokenFactory<'a>>::From;

pub struct SysYLexer<'input, Input: CharStream<From<'input>>> {
    base: BaseLexer<'input, SysYLexerActions, Input, LocalTokenFactory<'input>>,
}

antlr_rust::tid! { impl<'input,Input> TidAble<'input> for SysYLexer<'input,Input> where Input:CharStream<From<'input> > }

impl<'input, Input: CharStream<From<'input>>> Deref for SysYLexer<'input, Input> {
    type Target = BaseLexer<'input, SysYLexerActions, Input, LocalTokenFactory<'input>>;

    fn deref(&self) -> &Self::Target {
        &self.base
    }
}

impl<'input, Input: CharStream<From<'input>>> DerefMut for SysYLexer<'input, Input> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.base
    }
}

impl<'input, Input: CharStream<From<'input>>> SysYLexer<'input, Input> {
    fn get_rule_names(&self) -> &'static [&'static str] {
        &ruleNames
    }
    fn get_literal_names(&self) -> &[Option<&str>] {
        &_LITERAL_NAMES
    }

    fn get_symbolic_names(&self) -> &[Option<&str>] {
        &_SYMBOLIC_NAMES
    }

    fn get_grammar_file_name(&self) -> &'static str {
        "SysYLexer.g4"
    }

    pub fn new_with_token_factory(input: Input, tf: &'input LocalTokenFactory<'input>) -> Self {
        antlr_rust::recognizer::check_version("0", "3");
        Self {
            base: BaseLexer::new_base_lexer(
                input,
                LexerATNSimulator::new_lexer_atnsimulator(
                    _ATN.clone(),
                    _decision_to_DFA.clone(),
                    _shared_context_cache.clone(),
                ),
                SysYLexerActions {},
                tf,
            ),
        }
    }
}

impl<'input, Input: CharStream<From<'input>>> SysYLexer<'input, Input>
where
    &'input LocalTokenFactory<'input>: Default,
{
    pub fn new(input: Input) -> Self {
        SysYLexer::new_with_token_factory(input, <&LocalTokenFactory<'input> as Default>::default())
    }
}

pub struct SysYLexerActions {}

impl SysYLexerActions {}

impl<'input, Input: CharStream<From<'input>>>
    Actions<'input, BaseLexer<'input, SysYLexerActions, Input, LocalTokenFactory<'input>>>
    for SysYLexerActions
{
}

impl<'input, Input: CharStream<From<'input>>> SysYLexer<'input, Input> {}

impl<'input, Input: CharStream<From<'input>>>
    LexerRecog<'input, BaseLexer<'input, SysYLexerActions, Input, LocalTokenFactory<'input>>>
    for SysYLexerActions
{
}
impl<'input> TokenAware<'input> for SysYLexerActions {
    type TF = LocalTokenFactory<'input>;
}

impl<'input, Input: CharStream<From<'input>>> TokenSource<'input> for SysYLexer<'input, Input> {
    type TF = LocalTokenFactory<'input>;

    fn next_token(&mut self) -> <Self::TF as TokenFactory<'input>>::Tok {
        self.base.next_token()
    }

    fn get_line(&self) -> isize {
        self.base.get_line()
    }

    fn get_char_position_in_line(&self) -> isize {
        self.base.get_char_position_in_line()
    }

    fn get_input_stream(&mut self) -> Option<&mut dyn IntStream> {
        self.base.get_input_stream()
    }

    fn get_source_name(&self) -> String {
        self.base.get_source_name()
    }

    fn get_token_factory(&self) -> &'input Self::TF {
        self.base.get_token_factory()
    }
}

lazy_static! {
    static ref _ATN: Arc<ATN> =
        Arc::new(ATNDeserializer::new(None).deserialize(_serializedATN.chars()));
    static ref _decision_to_DFA: Arc<Vec<antlr_rust::RwLock<DFA>>> = {
        let mut dfa = Vec::new();
        let size = _ATN.decision_to_state.len();
        for i in 0..size {
            dfa.push(DFA::new(_ATN.clone(), _ATN.get_decision_state(i), i as isize).into())
        }
        Arc::new(dfa)
    };
}

const _serializedATN: &'static str =
    "\x03\u{608b}\u{a72a}\u{8133}\u{b9ed}\u{417c}\u{3be7}\u{7786}\u{5964}\x02\
		\x2f\u{17e}\x08\x01\x04\x02\x09\x02\x04\x03\x09\x03\x04\x04\x09\x04\x04\
		\x05\x09\x05\x04\x06\x09\x06\x04\x07\x09\x07\x04\x08\x09\x08\x04\x09\x09\
		\x09\x04\x0a\x09\x0a\x04\x0b\x09\x0b\x04\x0c\x09\x0c\x04\x0d\x09\x0d\x04\
		\x0e\x09\x0e\x04\x0f\x09\x0f\x04\x10\x09\x10\x04\x11\x09\x11\x04\x12\x09\
		\x12\x04\x13\x09\x13\x04\x14\x09\x14\x04\x15\x09\x15\x04\x16\x09\x16\x04\
		\x17\x09\x17\x04\x18\x09\x18\x04\x19\x09\x19\x04\x1a\x09\x1a\x04\x1b\x09\
		\x1b\x04\x1c\x09\x1c\x04\x1d\x09\x1d\x04\x1e\x09\x1e\x04\x1f\x09\x1f\x04\
		\x20\x09\x20\x04\x21\x09\x21\x04\x22\x09\x22\x04\x23\x09\x23\x04\x24\x09\
		\x24\x04\x25\x09\x25\x04\x26\x09\x26\x04\x27\x09\x27\x04\x28\x09\x28\x04\
		\x29\x09\x29\x04\x2a\x09\x2a\x04\x2b\x09\x2b\x04\x2c\x09\x2c\x04\x2d\x09\
		\x2d\x04\x2e\x09\x2e\x04\x2f\x09\x2f\x04\x30\x09\x30\x04\x31\x09\x31\x04\
		\x32\x09\x32\x04\x33\x09\x33\x04\x34\x09\x34\x04\x35\x09\x35\x04\x36\x09\
		\x36\x04\x37\x09\x37\x04\x38\x09\x38\x04\x39\x09\x39\x04\x3a\x09\x3a\x04\
		\x3b\x09\x3b\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\
		\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\
		\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\
		\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x08\x03\x08\x03\x08\x03\x09\x03\
		\x09\x03\x09\x03\x09\x03\x09\x03\x0a\x03\x0a\x03\x0a\x03\x0a\x03\x0b\x03\
		\x0b\x03\x0b\x03\x0b\x03\x0b\x03\x0b\x03\x0c\x03\x0c\x03\x0c\x03\x0d\x03\
		\x0d\x03\x0d\x03\x0d\x03\x0d\x03\x0d\x03\x0e\x03\x0e\x03\x0e\x03\x0e\x03\
		\x0e\x03\x0e\x03\x0e\x03\x0e\x03\x0e\x03\x0f\x03\x0f\x03\x10\x03\x10\x03\
		\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\
		\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\
		\x1a\x03\x1a\x03\x1b\x03\x1b\x03\x1c\x03\x1c\x03\x1d\x03\x1d\x03\x1e\x03\
		\x1e\x03\x1f\x03\x1f\x03\x20\x03\x20\x03\x20\x03\x21\x03\x21\x03\x21\x03\
		\x22\x03\x22\x03\x22\x03\x23\x03\x23\x03\x23\x03\x24\x03\x24\x03\x25\x03\
		\x25\x03\x25\x03\x26\x03\x26\x03\x27\x03\x27\x03\x27\x03\x28\x06\x28\u{f3}\
		\x0a\x28\x0d\x28\x0e\x28\u{f4}\x03\x28\x03\x28\x03\x28\x03\x28\x06\x28\
		\u{fb}\x0a\x28\x0d\x28\x0e\x28\u{fc}\x03\x28\x03\x28\x03\x28\x03\x28\x06\
		\x28\u{103}\x0a\x28\x0d\x28\x0e\x28\u{104}\x05\x28\u{107}\x0a\x28\x03\x29\
		\x03\x29\x03\x2a\x03\x2a\x07\x2a\u{10d}\x0a\x2a\x0c\x2a\x0e\x2a\u{110}\
		\x0b\x2a\x03\x2b\x03\x2b\x03\x2b\x03\x2b\x03\x2c\x03\x2c\x03\x2c\x03\x2c\
		\x07\x2c\u{11a}\x0a\x2c\x0c\x2c\x0e\x2c\u{11d}\x0b\x2c\x03\x2c\x03\x2c\
		\x03\x2d\x03\x2d\x03\x2d\x03\x2d\x07\x2d\u{125}\x0a\x2d\x0c\x2d\x0e\x2d\
		\u{128}\x0b\x2d\x03\x2d\x03\x2d\x03\x2d\x03\x2d\x03\x2d\x03\x2e\x03\x2e\
		\x03\x2f\x03\x2f\x03\x30\x03\x30\x03\x30\x03\x31\x03\x31\x05\x31\u{138}\
		\x0a\x31\x03\x32\x03\x32\x05\x32\u{13c}\x0a\x32\x03\x32\x05\x32\u{13f}\
		\x0a\x32\x03\x32\x03\x32\x03\x32\x05\x32\u{144}\x0a\x32\x05\x32\u{146}\
		\x0a\x32\x03\x33\x03\x33\x03\x33\x05\x33\u{14b}\x0a\x33\x03\x33\x03\x33\
		\x05\x33\u{14f}\x0a\x33\x03\x34\x05\x34\u{152}\x0a\x34\x03\x34\x03\x34\
		\x03\x34\x03\x34\x03\x34\x05\x34\u{159}\x0a\x34\x03\x35\x03\x35\x05\x35\
		\u{15d}\x0a\x35\x03\x35\x03\x35\x03\x36\x03\x36\x03\x37\x06\x37\u{164}\
		\x0a\x37\x0d\x37\x0e\x37\u{165}\x03\x38\x05\x38\u{169}\x0a\x38\x03\x38\
		\x03\x38\x03\x38\x03\x38\x03\x38\x05\x38\u{170}\x0a\x38\x03\x39\x03\x39\
		\x05\x39\u{174}\x0a\x39\x03\x39\x03\x39\x03\x3a\x06\x3a\u{179}\x0a\x3a\
		\x0d\x3a\x0e\x3a\u{17a}\x03\x3b\x03\x3b\x03\u{126}\x02\x3c\x03\x03\x05\
		\x04\x07\x05\x09\x06\x0b\x07\x0d\x08\x0f\x09\x11\x0a\x13\x0b\x15\x0c\x17\
		\x0d\x19\x0e\x1b\x0f\x1d\x10\x1f\x11\x21\x12\x23\x13\x25\x14\x27\x15\x29\
		\x16\x2b\x17\x2d\x18\x2f\x19\x31\x1a\x33\x1b\x35\x1c\x37\x1d\x39\x1e\x3b\
		\x1f\x3d\x20\x3f\x21\x41\x22\x43\x23\x45\x24\x47\x25\x49\x26\x4b\x27\x4d\
		\x28\x4f\x29\x51\x2a\x53\x2b\x55\x2c\x57\x2d\x59\x2e\x5b\x02\x5d\x02\x5f\
		\x02\x61\x02\x63\x02\x65\x02\x67\x02\x69\x02\x6b\x02\x6d\x2f\x6f\x02\x71\
		\x02\x73\x02\x75\x02\x03\x02\x0d\x03\x02\x32\x3b\x05\x02\x32\x3b\x43\x48\
		\x63\x68\x05\x02\x43\x5c\x61\x61\x63\x7c\x06\x02\x32\x3b\x43\x5c\x61\x61\
		\x63\x7c\x05\x02\x0b\x0c\x0f\x0f\x22\x22\x03\x02\x0c\x0c\x04\x02\x5a\x5a\
		\x7a\x7a\x04\x02\x47\x47\x67\x67\x04\x02\x2d\x2d\x2f\x2f\x04\x02\x52\x52\
		\x72\x72\x06\x02\x48\x48\x4e\x4e\x68\x68\x6e\x6e\x02\u{187}\x02\x03\x03\
		\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\x09\x03\
		\x02\x02\x02\x02\x0b\x03\x02\x02\x02\x02\x0d\x03\x02\x02\x02\x02\x0f\x03\
		\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\
		\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1b\x03\
		\x02\x02\x02\x02\x1d\x03\x02\x02\x02\x02\x1f\x03\x02\x02\x02\x02\x21\x03\
		\x02\x02\x02\x02\x23\x03\x02\x02\x02\x02\x25\x03\x02\x02\x02\x02\x27\x03\
		\x02\x02\x02\x02\x29\x03\x02\x02\x02\x02\x2b\x03\x02\x02\x02\x02\x2d\x03\
		\x02\x02\x02\x02\x2f\x03\x02\x02\x02\x02\x31\x03\x02\x02\x02\x02\x33\x03\
		\x02\x02\x02\x02\x35\x03\x02\x02\x02\x02\x37\x03\x02\x02\x02\x02\x39\x03\
		\x02\x02\x02\x02\x3b\x03\x02\x02\x02\x02\x3d\x03\x02\x02\x02\x02\x3f\x03\
		\x02\x02\x02\x02\x41\x03\x02\x02\x02\x02\x43\x03\x02\x02\x02\x02\x45\x03\
		\x02\x02\x02\x02\x47\x03\x02\x02\x02\x02\x49\x03\x02\x02\x02\x02\x4b\x03\
		\x02\x02\x02\x02\x4d\x03\x02\x02\x02\x02\x4f\x03\x02\x02\x02\x02\x51\x03\
		\x02\x02\x02\x02\x53\x03\x02\x02\x02\x02\x55\x03\x02\x02\x02\x02\x57\x03\
		\x02\x02\x02\x02\x59\x03\x02\x02\x02\x02\x6d\x03\x02\x02\x02\x03\x77\x03\
		\x02\x02\x02\x05\x79\x03\x02\x02\x02\x07\x7d\x03\x02\x02\x02\x09\u{83}\
		\x03\x02\x02\x02\x0b\u{88}\x03\x02\x02\x02\x0d\u{8e}\x03\x02\x02\x02\x0f\
		\u{95}\x03\x02\x02\x02\x11\u{98}\x03\x02\x02\x02\x13\u{9d}\x03\x02\x02\
		\x02\x15\u{a1}\x03\x02\x02\x02\x17\u{a7}\x03\x02\x02\x02\x19\u{aa}\x03\
		\x02\x02\x02\x1b\u{b0}\x03\x02\x02\x02\x1d\u{b9}\x03\x02\x02\x02\x1f\u{bb}\
		\x03\x02\x02\x02\x21\u{bd}\x03\x02\x02\x02\x23\u{bf}\x03\x02\x02\x02\x25\
		\u{c1}\x03\x02\x02\x02\x27\u{c3}\x03\x02\x02\x02\x29\u{c5}\x03\x02\x02\
		\x02\x2b\u{c7}\x03\x02\x02\x02\x2d\u{c9}\x03\x02\x02\x02\x2f\u{cb}\x03\
		\x02\x02\x02\x31\u{cd}\x03\x02\x02\x02\x33\u{cf}\x03\x02\x02\x02\x35\u{d1}\
		\x03\x02\x02\x02\x37\u{d3}\x03\x02\x02\x02\x39\u{d5}\x03\x02\x02\x02\x3b\
		\u{d7}\x03\x02\x02\x02\x3d\u{d9}\x03\x02\x02\x02\x3f\u{db}\x03\x02\x02\
		\x02\x41\u{de}\x03\x02\x02\x02\x43\u{e1}\x03\x02\x02\x02\x45\u{e4}\x03\
		\x02\x02\x02\x47\u{e7}\x03\x02\x02\x02\x49\u{e9}\x03\x02\x02\x02\x4b\u{ec}\
		\x03\x02\x02\x02\x4d\u{ee}\x03\x02\x02\x02\x4f\u{106}\x03\x02\x02\x02\x51\
		\u{108}\x03\x02\x02\x02\x53\u{10a}\x03\x02\x02\x02\x55\u{111}\x03\x02\x02\
		\x02\x57\u{115}\x03\x02\x02\x02\x59\u{120}\x03\x02\x02\x02\x5b\u{12e}\x03\
		\x02\x02\x02\x5d\u{130}\x03\x02\x02\x02\x5f\u{132}\x03\x02\x02\x02\x61\
		\u{137}\x03\x02\x02\x02\x63\u{145}\x03\x02\x02\x02\x65\u{147}\x03\x02\x02\
		\x02\x67\u{158}\x03\x02\x02\x02\x69\u{15a}\x03\x02\x02\x02\x6b\u{160}\x03\
		\x02\x02\x02\x6d\u{163}\x03\x02\x02\x02\x6f\u{16f}\x03\x02\x02\x02\x71\
		\u{171}\x03\x02\x02\x02\x73\u{178}\x03\x02\x02\x02\x75\u{17c}\x03\x02\x02\
		\x02\x77\x78\x07\x3f\x02\x02\x78\x04\x03\x02\x02\x02\x79\x7a\x07\x6b\x02\
		\x02\x7a\x7b\x07\x70\x02\x02\x7b\x7c\x07\x76\x02\x02\x7c\x06\x03\x02\x02\
		\x02\x7d\x7e\x07\x68\x02\x02\x7e\x7f\x07\x6e\x02\x02\x7f\u{80}\x07\x71\
		\x02\x02\u{80}\u{81}\x07\x63\x02\x02\u{81}\u{82}\x07\x76\x02\x02\u{82}\
		\x08\x03\x02\x02\x02\u{83}\u{84}\x07\x78\x02\x02\u{84}\u{85}\x07\x71\x02\
		\x02\u{85}\u{86}\x07\x6b\x02\x02\u{86}\u{87}\x07\x66\x02\x02\u{87}\x0a\
		\x03\x02\x02\x02\u{88}\u{89}\x07\x65\x02\x02\u{89}\u{8a}\x07\x71\x02\x02\
		\u{8a}\u{8b}\x07\x70\x02\x02\u{8b}\u{8c}\x07\x75\x02\x02\u{8c}\u{8d}\x07\
		\x76\x02\x02\u{8d}\x0c\x03\x02\x02\x02\u{8e}\u{8f}\x07\x74\x02\x02\u{8f}\
		\u{90}\x07\x67\x02\x02\u{90}\u{91}\x07\x76\x02\x02\u{91}\u{92}\x07\x77\
		\x02\x02\u{92}\u{93}\x07\x74\x02\x02\u{93}\u{94}\x07\x70\x02\x02\u{94}\
		\x0e\x03\x02\x02\x02\u{95}\u{96}\x07\x6b\x02\x02\u{96}\u{97}\x07\x68\x02\
		\x02\u{97}\x10\x03\x02\x02\x02\u{98}\u{99}\x07\x67\x02\x02\u{99}\u{9a}\
		\x07\x6e\x02\x02\u{9a}\u{9b}\x07\x75\x02\x02\u{9b}\u{9c}\x07\x67\x02\x02\
		\u{9c}\x12\x03\x02\x02\x02\u{9d}\u{9e}\x07\x68\x02\x02\u{9e}\u{9f}\x07\
		\x71\x02\x02\u{9f}\u{a0}\x07\x74\x02\x02\u{a0}\x14\x03\x02\x02\x02\u{a1}\
		\u{a2}\x07\x79\x02\x02\u{a2}\u{a3}\x07\x6a\x02\x02\u{a3}\u{a4}\x07\x6b\
		\x02\x02\u{a4}\u{a5}\x07\x6e\x02\x02\u{a5}\u{a6}\x07\x67\x02\x02\u{a6}\
		\x16\x03\x02\x02\x02\u{a7}\u{a8}\x07\x66\x02\x02\u{a8}\u{a9}\x07\x71\x02\
		\x02\u{a9}\x18\x03\x02\x02\x02\u{aa}\u{ab}\x07\x64\x02\x02\u{ab}\u{ac}\
		\x07\x74\x02\x02\u{ac}\u{ad}\x07\x67\x02\x02\u{ad}\u{ae}\x07\x63\x02\x02\
		\u{ae}\u{af}\x07\x6d\x02\x02\u{af}\x1a\x03\x02\x02\x02\u{b0}\u{b1}\x07\
		\x65\x02\x02\u{b1}\u{b2}\x07\x71\x02\x02\u{b2}\u{b3}\x07\x70\x02\x02\u{b3}\
		\u{b4}\x07\x76\x02\x02\u{b4}\u{b5}\x07\x6b\x02\x02\u{b5}\u{b6}\x07\x70\
		\x02\x02\u{b6}\u{b7}\x07\x77\x02\x02\u{b7}\u{b8}\x07\x67\x02\x02\u{b8}\
		\x1c\x03\x02\x02\x02\u{b9}\u{ba}\x07\x2a\x02\x02\u{ba}\x1e\x03\x02\x02\
		\x02\u{bb}\u{bc}\x07\x2b\x02\x02\u{bc}\x20\x03\x02\x02\x02\u{bd}\u{be}\
		\x07\x5d\x02\x02\u{be}\x22\x03\x02\x02\x02\u{bf}\u{c0}\x07\x5f\x02\x02\
		\u{c0}\x24\x03\x02\x02\x02\u{c1}\u{c2}\x07\x7d\x02\x02\u{c2}\x26\x03\x02\
		\x02\x02\u{c3}\u{c4}\x07\x7f\x02\x02\u{c4}\x28\x03\x02\x02\x02\u{c5}\u{c6}\
		\x07\x2e\x02\x02\u{c6}\x2a\x03\x02\x02\x02\u{c7}\u{c8}\x07\x3d\x02\x02\
		\u{c8}\x2c\x03\x02\x02\x02\u{c9}\u{ca}\x07\x41\x02\x02\u{ca}\x2e\x03\x02\
		\x02\x02\u{cb}\u{cc}\x07\x3c\x02\x02\u{cc}\x30\x03\x02\x02\x02\u{cd}\u{ce}\
		\x07\x2f\x02\x02\u{ce}\x32\x03\x02\x02\x02\u{cf}\u{d0}\x07\x23\x02\x02\
		\u{d0}\x34\x03\x02\x02\x02\u{d1}\u{d2}\x07\u{80}\x02\x02\u{d2}\x36\x03\
		\x02\x02\x02\u{d3}\u{d4}\x07\x2d\x02\x02\u{d4}\x38\x03\x02\x02\x02\u{d5}\
		\u{d6}\x07\x2c\x02\x02\u{d6}\x3a\x03\x02\x02\x02\u{d7}\u{d8}\x07\x31\x02\
		\x02\u{d8}\x3c\x03\x02\x02\x02\u{d9}\u{da}\x07\x27\x02\x02\u{da}\x3e\x03\
		\x02\x02\x02\u{db}\u{dc}\x07\x28\x02\x02\u{dc}\u{dd}\x07\x28\x02\x02\u{dd}\
		\x40\x03\x02\x02\x02\u{de}\u{df}\x07\x7e\x02\x02\u{df}\u{e0}\x07\x7e\x02\
		\x02\u{e0}\x42\x03\x02\x02\x02\u{e1}\u{e2}\x07\x3f\x02\x02\u{e2}\u{e3}\
		\x07\x3f\x02\x02\u{e3}\x44\x03\x02\x02\x02\u{e4}\u{e5}\x07\x23\x02\x02\
		\u{e5}\u{e6}\x07\x3f\x02\x02\u{e6}\x46\x03\x02\x02\x02\u{e7}\u{e8}\x07\
		\x3e\x02\x02\u{e8}\x48\x03\x02\x02\x02\u{e9}\u{ea}\x07\x3e\x02\x02\u{ea}\
		\u{eb}\x07\x3f\x02\x02\u{eb}\x4a\x03\x02\x02\x02\u{ec}\u{ed}\x07\x40\x02\
		\x02\u{ed}\x4c\x03\x02\x02\x02\u{ee}\u{ef}\x07\x40\x02\x02\u{ef}\u{f0}\
		\x07\x3f\x02\x02\u{f0}\x4e\x03\x02\x02\x02\u{f1}\u{f3}\x09\x02\x02\x02\
		\u{f2}\u{f1}\x03\x02\x02\x02\u{f3}\u{f4}\x03\x02\x02\x02\u{f4}\u{f2}\x03\
		\x02\x02\x02\u{f4}\u{f5}\x03\x02\x02\x02\u{f5}\u{107}\x03\x02\x02\x02\u{f6}\
		\u{f7}\x07\x32\x02\x02\u{f7}\u{f8}\x07\x7a\x02\x02\u{f8}\u{fa}\x03\x02\
		\x02\x02\u{f9}\u{fb}\x09\x03\x02\x02\u{fa}\u{f9}\x03\x02\x02\x02\u{fb}\
		\u{fc}\x03\x02\x02\x02\u{fc}\u{fa}\x03\x02\x02\x02\u{fc}\u{fd}\x03\x02\
		\x02\x02\u{fd}\u{107}\x03\x02\x02\x02\u{fe}\u{ff}\x07\x32\x02\x02\u{ff}\
		\u{100}\x07\x5a\x02\x02\u{100}\u{102}\x03\x02\x02\x02\u{101}\u{103}\x09\
		\x03\x02\x02\u{102}\u{101}\x03\x02\x02\x02\u{103}\u{104}\x03\x02\x02\x02\
		\u{104}\u{102}\x03\x02\x02\x02\u{104}\u{105}\x03\x02\x02\x02\u{105}\u{107}\
		\x03\x02\x02\x02\u{106}\u{f2}\x03\x02\x02\x02\u{106}\u{f6}\x03\x02\x02\
		\x02\u{106}\u{fe}\x03\x02\x02\x02\u{107}\x50\x03\x02\x02\x02\u{108}\u{109}\
		\x05\x61\x31\x02\u{109}\x52\x03\x02\x02\x02\u{10a}\u{10e}\x09\x04\x02\x02\
		\u{10b}\u{10d}\x09\x05\x02\x02\u{10c}\u{10b}\x03\x02\x02\x02\u{10d}\u{110}\
		\x03\x02\x02\x02\u{10e}\u{10c}\x03\x02\x02\x02\u{10e}\u{10f}\x03\x02\x02\
		\x02\u{10f}\x54\x03\x02\x02\x02\u{110}\u{10e}\x03\x02\x02\x02\u{111}\u{112}\
		\x09\x06\x02\x02\u{112}\u{113}\x03\x02\x02\x02\u{113}\u{114}\x08\x2b\x02\
		\x02\u{114}\x56\x03\x02\x02\x02\u{115}\u{116}\x07\x31\x02\x02\u{116}\u{117}\
		\x07\x31\x02\x02\u{117}\u{11b}\x03\x02\x02\x02\u{118}\u{11a}\x0a\x07\x02\
		\x02\u{119}\u{118}\x03\x02\x02\x02\u{11a}\u{11d}\x03\x02\x02\x02\u{11b}\
		\u{119}\x03\x02\x02\x02\u{11b}\u{11c}\x03\x02\x02\x02\u{11c}\u{11e}\x03\
		\x02\x02\x02\u{11d}\u{11b}\x03\x02\x02\x02\u{11e}\u{11f}\x08\x2c\x02\x02\
		\u{11f}\x58\x03\x02\x02\x02\u{120}\u{121}\x07\x31\x02\x02\u{121}\u{122}\
		\x07\x2c\x02\x02\u{122}\u{126}\x03\x02\x02\x02\u{123}\u{125}\x0b\x02\x02\
		\x02\u{124}\u{123}\x03\x02\x02\x02\u{125}\u{128}\x03\x02\x02\x02\u{126}\
		\u{127}\x03\x02\x02\x02\u{126}\u{124}\x03\x02\x02\x02\u{127}\u{129}\x03\
		\x02\x02\x02\u{128}\u{126}\x03\x02\x02\x02\u{129}\u{12a}\x07\x2c\x02\x02\
		\u{12a}\u{12b}\x07\x31\x02\x02\u{12b}\u{12c}\x03\x02\x02\x02\u{12c}\u{12d}\
		\x08\x2d\x02\x02\u{12d}\x5a\x03\x02\x02\x02\u{12e}\u{12f}\x09\x02\x02\x02\
		\u{12f}\x5c\x03\x02\x02\x02\u{130}\u{131}\x09\x03\x02\x02\u{131}\x5e\x03\
		\x02\x02\x02\u{132}\u{133}\x07\x32\x02\x02\u{133}\u{134}\x09\x08\x02\x02\
		\u{134}\x60\x03\x02\x02\x02\u{135}\u{138}\x05\x63\x32\x02\u{136}\u{138}\
		\x05\x65\x33\x02\u{137}\u{135}\x03\x02\x02\x02\u{137}\u{136}\x03\x02\x02\
		\x02\u{138}\x62\x03\x02\x02\x02\u{139}\u{13b}\x05\x67\x34\x02\u{13a}\u{13c}\
		\x05\x69\x35\x02\u{13b}\u{13a}\x03\x02\x02\x02\u{13b}\u{13c}\x03\x02\x02\
		\x02\u{13c}\u{13e}\x03\x02\x02\x02\u{13d}\u{13f}\x05\x75\x3b\x02\u{13e}\
		\u{13d}\x03\x02\x02\x02\u{13e}\u{13f}\x03\x02\x02\x02\u{13f}\u{146}\x03\
		\x02\x02\x02\u{140}\u{141}\x05\x6d\x37\x02\u{141}\u{143}\x05\x69\x35\x02\
		\u{142}\u{144}\x05\x75\x3b\x02\u{143}\u{142}\x03\x02\x02\x02\u{143}\u{144}\
		\x03\x02\x02\x02\u{144}\u{146}\x03\x02\x02\x02\u{145}\u{139}\x03\x02\x02\
		\x02\u{145}\u{140}\x03\x02\x02\x02\u{146}\x64\x03\x02\x02\x02\u{147}\u{14a}\
		\x05\x5f\x30\x02\u{148}\u{14b}\x05\x6f\x38\x02\u{149}\u{14b}\x05\x73\x3a\
		\x02\u{14a}\u{148}\x03\x02\x02\x02\u{14a}\u{149}\x03\x02\x02\x02\u{14b}\
		\u{14c}\x03\x02\x02\x02\u{14c}\u{14e}\x05\x71\x39\x02\u{14d}\u{14f}\x05\
		\x75\x3b\x02\u{14e}\u{14d}\x03\x02\x02\x02\u{14e}\u{14f}\x03\x02\x02\x02\
		\u{14f}\x66\x03\x02\x02\x02\u{150}\u{152}\x05\x6d\x37\x02\u{151}\u{150}\
		\x03\x02\x02\x02\u{151}\u{152}\x03\x02\x02\x02\u{152}\u{153}\x03\x02\x02\
		\x02\u{153}\u{154}\x07\x30\x02\x02\u{154}\u{159}\x05\x6d\x37\x02\u{155}\
		\u{156}\x05\x6d\x37\x02\u{156}\u{157}\x07\x30\x02\x02\u{157}\u{159}\x03\
		\x02\x02\x02\u{158}\u{151}\x03\x02\x02\x02\u{158}\u{155}\x03\x02\x02\x02\
		\u{159}\x68\x03\x02\x02\x02\u{15a}\u{15c}\x09\x09\x02\x02\u{15b}\u{15d}\
		\x05\x6b\x36\x02\u{15c}\u{15b}\x03\x02\x02\x02\u{15c}\u{15d}\x03\x02\x02\
		\x02\u{15d}\u{15e}\x03\x02\x02\x02\u{15e}\u{15f}\x05\x6d\x37\x02\u{15f}\
		\x6a\x03\x02\x02\x02\u{160}\u{161}\x09\x0a\x02\x02\u{161}\x6c\x03\x02\x02\
		\x02\u{162}\u{164}\x05\x5b\x2e\x02\u{163}\u{162}\x03\x02\x02\x02\u{164}\
		\u{165}\x03\x02\x02\x02\u{165}\u{163}\x03\x02\x02\x02\u{165}\u{166}\x03\
		\x02\x02\x02\u{166}\x6e\x03\x02\x02\x02\u{167}\u{169}\x05\x73\x3a\x02\u{168}\
		\u{167}\x03\x02\x02\x02\u{168}\u{169}\x03\x02\x02\x02\u{169}\u{16a}\x03\
		\x02\x02\x02\u{16a}\u{16b}\x07\x30\x02\x02\u{16b}\u{170}\x05\x73\x3a\x02\
		\u{16c}\u{16d}\x05\x73\x3a\x02\u{16d}\u{16e}\x07\x30\x02\x02\u{16e}\u{170}\
		\x03\x02\x02\x02\u{16f}\u{168}\x03\x02\x02\x02\u{16f}\u{16c}\x03\x02\x02\
		\x02\u{170}\x70\x03\x02\x02\x02\u{171}\u{173}\x09\x0b\x02\x02\u{172}\u{174}\
		\x05\x6b\x36\x02\u{173}\u{172}\x03\x02\x02\x02\u{173}\u{174}\x03\x02\x02\
		\x02\u{174}\u{175}\x03\x02\x02\x02\u{175}\u{176}\x05\x6d\x37\x02\u{176}\
		\x72\x03\x02\x02\x02\u{177}\u{179}\x05\x5d\x2f\x02\u{178}\u{177}\x03\x02\
		\x02\x02\u{179}\u{17a}\x03\x02\x02\x02\u{17a}\u{178}\x03\x02\x02\x02\u{17a}\
		\u{17b}\x03\x02\x02\x02\u{17b}\x74\x03\x02\x02\x02\u{17c}\u{17d}\x09\x0c\
		\x02\x02\u{17d}\x76\x03\x02\x02\x02\x19\x02\u{f4}\u{fc}\u{104}\u{106}\u{10e}\
		\u{11b}\u{126}\u{137}\u{13b}\u{13e}\u{143}\u{145}\u{14a}\u{14e}\u{151}\
		\u{158}\u{15c}\u{165}\u{168}\u{16f}\u{173}\u{17a}\x03\x08\x02\x02";
